version: '3.7'
services:
  traefik:
    image: "traefik"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  client:
    build: 
      context: .
      args:
        NODE_ENV: dev
    container_name: "client"
    ports:
      - "3000:3000"
    volumes:
      - '.:/app'
      - '/app/node_modules'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`d.nxt.client.localhost`)"
      - "traefik.http.routers.client.entrypoints=web"
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - "postgres"
    ports:
      - 5050:80
    env_file:
      - dev.env
    volumes:
      - ./pgadmin-data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`d.nxt.pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0-beta.10
    ports:
      - "8081:8080"
    depends_on:
      - "postgres"
    restart: always
    env_file:
      - dev.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hasura.rule=Host(`d.nxt.hasura.localhost`)"
      - "traefik.http.routers.hasura.entrypoints=web"
  postgres:
    image: "postgres"
    container_name: "postgres"
    restart: always
    env_file:
      - dev.env
    labels:
      - "traefik.enable=true"
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data